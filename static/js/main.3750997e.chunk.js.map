{"version":3,"sources":["bulb.gif","FCards.js","App.js","serviceWorker.js","index.js"],"names":["FCards","state","facts","fetch","then","response","json","data","items","sort","Math","random","slice","setState","console","log","className","this","map","fact","src","bulb","alt","title","body","id","Component","App","onClick","window","location","reload","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"mQAAe,MAA0B,iCCoC1BA,E,4MAhCbC,MAAQ,CACNC,MAAO,I,kEAEW,IAAD,OACnBC,MAAM,oEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GACH,IAEKC,EAFaD,EAAKE,MAAK,kBAAMC,KAAKC,SAAW,MAEzBC,MAAM,EADnB,IAEb,EAAKC,SAAS,CAACX,MAAMM,IACrBM,QAAQC,IAAI,EAAKd,MAAMC,Y,+BAIzB,OACE,qBAAKc,UAAU,gBAAf,SACGC,KAAKhB,MAAMC,MAAMgB,KAAI,SAACC,GAAD,OACpB,cAAC,IAAD,CAAYH,UAAU,QAAtB,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,MAAMI,IAAKC,EAAMC,IAAI,UAEpC,6BAAKH,EAAKI,QACV,6BAAKJ,EAAKK,WALqBL,EAAKM,a,GAnB7BC,aCkBNC,MAhBf,WAIE,OACE,mCACA,sBAAKX,UAAU,MAAf,UAEE,oBAAIY,QAPY,WAClBC,OAAOC,SAASC,UAMd,mBAEF,cAAC,EAAD,UCfEC,EAAcC,QACW,cAA7BJ,OAAOC,SAASI,UACe,UAA7BL,OAAOC,SAASI,UAChBL,OAAOC,SAASI,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTjC,MAAK,SAACsC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfsC,UAAUC,cAAcO,YAC1BjC,QAAQC,IACN,iHAGEuB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAGlB5B,QAAQC,IAAI,sCACRuB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAACC,GACNrC,QAAQqC,MAAM,4CAA6CA,MCzDjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDFnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIkB,IAAIC,SAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OACvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,SAAN,sBAEP1B,IAiDV,SAAiCK,EAAOC,GACtCnC,MAAMkC,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B1D,MAAK,SAACC,GACL,IAAM0D,EAAc1D,EAASyD,QAAQE,IAAI,gBAEnB,MAApB3D,EAAS4D,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE5C3B,UAAUC,cAAc2B,MAAM/D,MAAK,SAACsC,GAClCA,EAAa0B,aAAahE,MAAK,WAC7ByB,OAAOC,SAASC,eAIpBK,EAAgBC,EAAOC,MAG1BY,OAAM,WACLpC,QAAQC,IACN,oEArEAsD,CAAwBhC,EAAOC,GAC/BC,UAAUC,cAAc2B,MAAM/D,MAAK,WACjCU,QAAQC,IACN,iHAKJqB,EAAgBC,EAAOC,OCd/BE,K","file":"static/js/main.3750997e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bulb.6b0e86bf.gif\";","import TinderCard from 'react-tinder-card';\nimport {Component} from 'react';\nimport bulb from './bulb.gif';\nclass FCards extends Component{\n  state = {\n    facts: []\n  };\n  componentDidMount(){\n  fetch('https://facts-json-bucket.s3.ap-south-1.amazonaws.com/facts.json')\n  .then(response => response.json())\n    .then(data => {\n       let shuffleData = data.sort(() => Math.random() - 0.5) //shuffle the response\n      const size = 10\n      const items = shuffleData.slice(0, size) //choose n elents from shuffledata\n      this.setState({facts:items});\n      console.log(this.state.facts);\n    });\n  }\n  render(){\n    return(\n      <div className='cardContainer'>\n        {this.state.facts.map((fact) =>\n          <TinderCard className='swipe' key={fact.id}>\n            <div className='card'>\n              <img className='gif' src={bulb} alt='FactO'/>\n              {/* <img src={fact.url} alt=\"pic\" /> */}\n              <h3>{fact.title}</h3>\n              <h4>{fact.body}</h4>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n    )\n  }\n}\n  \nexport default FCards;\n","import './App.css';\nimport FCards from './FCards';\n// import NavBar from './components/NavBar';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const refreshPage = () => {\n    window.location.reload();\n  }\n  return (\n    <>\n    <div className=\"app\">\n      {/* <NavBar/> */}\n      <h1 onClick={refreshPage}>FactO</h1>\n      {/* <button onClick={refreshPage}>click to reload</button> */}\n    <FCards/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}